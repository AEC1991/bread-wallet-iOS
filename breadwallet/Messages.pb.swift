// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: breadwallet/Messages.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Generalized status enumeration for request-response messages
enum MessageStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case accepted // = 1
  case rejected // = 2

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .accepted
    case 2: self = .rejected
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .accepted: return 1
    case .rejected: return 2
    }
  }

}

#if swift(>=4.2)

extension MessageStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// Error codes for response messages.
enum MessageError: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Unknown error
  case unknownError // = 0

  /// User denied the request.
  case userDenied // = 1

  /// Scope does not exist.
  case scopeUnknown // = 2

  /// For link request, if the remote entity's wallet id does not match wallet id from the initial pairing.
  case remoteIDMismatch // = 3

  /// For account request, address not found.
  case noAddressFound // = 4

  /// For payment/call request, transaction failed.
  case transactionFailed // = 5

  init() {
    self = .unknownError
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownError
    case 1: self = .userDenied
    case 2: self = .scopeUnknown
    case 3: self = .remoteIDMismatch
    case 4: self = .noAddressFound
    case 5: self = .transactionFailed
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownError: return 0
    case .userDenied: return 1
    case .scopeUnknown: return 2
    case .remoteIDMismatch: return 3
    case .noAddressFound: return 4
    case .transactionFailed: return 5
    }
  }

}

#if swift(>=4.2)

extension MessageError: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// PushNotification is only recognized as a member of Envelope
struct MessagePushNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var action: String {
    get {return _action ?? String()}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {self._action = nil}

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _message: String? = nil
  fileprivate var _action: String? = nil
  fileprivate var _title: String? = nil
}

/// Envelope encapsulates one of the below message types
struct MessageEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version of this message. Versioning accomodates future additions
  var version: Int32 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  /// Optional Service to which this message applies
  var service: String {
    get {return _storage._service ?? String()}
    set {_uniqueStorage()._service = newValue}
  }
  /// Returns true if `service` has been explicitly set.
  var hasService: Bool {return _storage._service != nil}
  /// Clears the value of `service`. Subsequent reads from it will return its default value.
  mutating func clearService() {_uniqueStorage()._service = nil}

  /// Optional UTC expiration date. ISO-8601-formatted.
  var expiration: String {
    get {return _storage._expiration ?? String()}
    set {_uniqueStorage()._expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  var hasExpiration: Bool {return _storage._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  mutating func clearExpiration() {_uniqueStorage()._expiration = nil}

  /// One of below messages's commented `message_type`
  var messageType: String {
    get {return _storage._messageType ?? String()}
    set {_uniqueStorage()._messageType = newValue}
  }
  /// Returns true if `messageType` has been explicitly set.
  var hasMessageType: Bool {return _storage._messageType != nil}
  /// Clears the value of `messageType`. Subsequent reads from it will return its default value.
  mutating func clearMessageType() {_uniqueStorage()._messageType = nil}

  /// ChaCha20-Poly1305-encrypted message
  var encryptedMessage: Data {
    get {return _storage._encryptedMessage ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._encryptedMessage = newValue}
  }
  /// Returns true if `encryptedMessage` has been explicitly set.
  var hasEncryptedMessage: Bool {return _storage._encryptedMessage != nil}
  /// Clears the value of `encryptedMessage`. Subsequent reads from it will return its default value.
  mutating func clearEncryptedMessage() {_uniqueStorage()._encryptedMessage = nil}

  /// DER-encoded sender public key
  var senderPublicKey: Data {
    get {return _storage._senderPublicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._senderPublicKey = newValue}
  }
  /// Returns true if `senderPublicKey` has been explicitly set.
  var hasSenderPublicKey: Bool {return _storage._senderPublicKey != nil}
  /// Clears the value of `senderPublicKey`. Subsequent reads from it will return its default value.
  mutating func clearSenderPublicKey() {_uniqueStorage()._senderPublicKey = nil}

  /// DER-encoded receiver public key
  var receiverPublicKey: Data {
    get {return _storage._receiverPublicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._receiverPublicKey = newValue}
  }
  /// Returns true if `receiverPublicKey` has been explicitly set.
  var hasReceiverPublicKey: Bool {return _storage._receiverPublicKey != nil}
  /// Clears the value of `receiverPublicKey`. Subsequent reads from it will return its default value.
  mutating func clearReceiverPublicKey() {_uniqueStorage()._receiverPublicKey = nil}

  /// requestor-originated UUID, useful for multi-plexing messages
  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  /// 96 bits unique random data, must never be reused
  var nonce: Data {
    get {return _storage._nonce ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
  var hasNonce: Bool {return _storage._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
  mutating func clearNonce() {_uniqueStorage()._nonce = nil}

  /// optionally, a push notification if supported
  var pushNotification: MessagePushNotification {
    get {return _storage._pushNotification ?? MessagePushNotification()}
    set {_uniqueStorage()._pushNotification = newValue}
  }
  /// Returns true if `pushNotification` has been explicitly set.
  var hasPushNotification: Bool {return _storage._pushNotification != nil}
  /// Clears the value of `pushNotification`. Subsequent reads from it will return its default value.
  mutating func clearPushNotification() {_uniqueStorage()._pushNotification = nil}

  /// compact recoverable signature
  var signature: Data {
    get {return _storage._signature ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {_uniqueStorage()._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Link two wallets. This establishes a communication channel for the encrypted message exchange.
/// In the case of status=UNKNOWN or status=REJECTED, public_key and id should be omitted.
/// message_type = "LINK"
struct MessageLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// a pairing key's public key
  var publicKey: Data {
    get {return _publicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  /// the static, public ID of the remote entity's wallet
  var id: Data {
    get {return _id ?? SwiftProtobuf.Internal.emptyData}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  /// status of pairing request
  var status: MessageStatus {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  /// if status=REJECTED, an error code.
  var error: MessageError {
    get {return _error ?? .unknownError}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _publicKey: Data? = nil
  fileprivate var _id: Data? = nil
  fileprivate var _status: MessageStatus? = nil
  fileprivate var _error: MessageError? = nil
}

/// Ping another wallet, to test the protocol and wallet link is established
/// message_type = "PING"
struct MessagePing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// can be any string. only used for testing
  var ping: String {
    get {return _ping ?? String()}
    set {_ping = newValue}
  }
  /// Returns true if `ping` has been explicitly set.
  var hasPing: Bool {return self._ping != nil}
  /// Clears the value of `ping`. Subsequent reads from it will return its default value.
  mutating func clearPing() {self._ping = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ping: String? = nil
}

/// Pong responds to a Ping from another wallet. It is courteous to respond to a Ping with a Pong by not mandatory
/// message_type = "PONG"
struct MessagePong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// should be the content of the Ping messages .ping attribute
  var pong: String {
    get {return _pong ?? String()}
    set {_pong = newValue}
  }
  /// Returns true if `pong` has been explicitly set.
  var hasPong: Bool {return self._pong != nil}
  /// Clears the value of `pong`. Subsequent reads from it will return its default value.
  mutating func clearPong() {self._pong = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pong: String? = nil
}

/// AccountRequest requests an account for a given scope
/// message_type = "ACCOUNT_REQUEST"
struct MessageAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// should be a currency code eg "ETH" or "BRD"
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
}

/// AccountResponse responds to an AccountRequest
/// message_type = "ACCOUNT_RESPONSE"
struct MessageAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// if status=ACCEPTED, should be the same scope as the request
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  /// if status=ACCEPTED, the receive address
  var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  /// any status response
  var status: MessageStatus {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  /// if status=REJECTED, an error code.
  var error: MessageError {
    get {return _error ?? .unknownError}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _address: String? = nil
  fileprivate var _status: MessageStatus? = nil
  fileprivate var _error: MessageError? = nil
}

/// PaymentRequest requests a payment from a given scope.
/// Apps should show a payment dialog to confirm this transaction.
/// message_type = "PAYMENT_REQUEST"
struct MessagePaymentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// should be a currency code eg "ETH" or "BRD"
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  /// a network designation
  var network: String {
    get {return _network ?? "mainnet"}
    set {_network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  var hasNetwork: Bool {return self._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  mutating func clearNetwork() {self._network = nil}

  /// the receive address for the desired payment
  var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  /// the desired amount expressed as an integer in the lowest currency denomination
  var amount: String {
    get {return _amount ?? String()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  /// optionally a request may include a memo, the receiver can retain if necessary
  var memo: String {
    get {return _memo ?? String()}
    set {_memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  var hasMemo: Bool {return self._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  mutating func clearMemo() {self._memo = nil}

  /// the transaction size limit, expressed as integer (e.g. gas limit for ETH)
  var transactionSize: String {
    get {return _transactionSize ?? String()}
    set {_transactionSize = newValue}
  }
  /// Returns true if `transactionSize` has been explicitly set.
  var hasTransactionSize: Bool {return self._transactionSize != nil}
  /// Clears the value of `transactionSize`. Subsequent reads from it will return its default value.
  mutating func clearTransactionSize() {self._transactionSize = nil}

  /// the transaction fee amount, expressed as integer in lowest currency denomination (e.g. gas price for ETH)
  var transactionFee: String {
    get {return _transactionFee ?? String()}
    set {_transactionFee = newValue}
  }
  /// Returns true if `transactionFee` has been explicitly set.
  var hasTransactionFee: Bool {return self._transactionFee != nil}
  /// Clears the value of `transactionFee`. Subsequent reads from it will return its default value.
  mutating func clearTransactionFee() {self._transactionFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _network: String? = nil
  fileprivate var _address: String? = nil
  fileprivate var _amount: String? = nil
  fileprivate var _memo: String? = nil
  fileprivate var _transactionSize: String? = nil
  fileprivate var _transactionFee: String? = nil
}

/// PaymentResponse responds to a PaymentRequest
/// message_type = "PAYMENT_RESPONSE"
struct MessagePaymentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// if status=ACCEPTED, should be the same scope as the request
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  /// any status response
  var status: MessageStatus {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  /// if status=ACCEPTED, the transaction ID
  var transactionID: String {
    get {return _transactionID ?? String()}
    set {_transactionID = newValue}
  }
  /// Returns true if `transactionID` has been explicitly set.
  var hasTransactionID: Bool {return self._transactionID != nil}
  /// Clears the value of `transactionID`. Subsequent reads from it will return its default value.
  mutating func clearTransactionID() {self._transactionID = nil}

  /// if status=REJECTED, an error code.
  var error: MessageError {
    get {return _error ?? .unknownError}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _status: MessageStatus? = nil
  fileprivate var _transactionID: String? = nil
  fileprivate var _error: MessageError? = nil
}

/// CallRequest requests a smart contract call for a given scope
/// Apps should show a payment dialog to confirm this transaction.
/// NOTE: This is currently disabled for ERC20 send operations, use PaymentRequest instead
/// message_type = "CALL_REQUEST"
struct MessageCallRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// should be a currency code eg "ETH" or "BRD"
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  /// a network designation
  var network: String {
    get {return _network ?? "mainnet"}
    set {_network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  var hasNetwork: Bool {return self._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  mutating func clearNetwork() {self._network = nil}

  /// the smart contract address
  var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  /// the abi-encoded parameters to send to the smart contract
  var abi: String {
    get {return _abi ?? String()}
    set {_abi = newValue}
  }
  /// Returns true if `abi` has been explicitly set.
  var hasAbi: Bool {return self._abi != nil}
  /// Clears the value of `abi`. Subsequent reads from it will return its default value.
  mutating func clearAbi() {self._abi = nil}

  /// the desired amount expressed as an integer in the lowest currency denomination
  var amount: String {
    get {return _amount ?? String()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  /// optionally a request may include a memo, the receiver can retain if necessary
  var memo: String {
    get {return _memo ?? String()}
    set {_memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  var hasMemo: Bool {return self._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  mutating func clearMemo() {self._memo = nil}

  /// the transaction size limit, expressed as integer (e.g. gas limit for ETH)
  var transactionSize: String {
    get {return _transactionSize ?? String()}
    set {_transactionSize = newValue}
  }
  /// Returns true if `transactionSize` has been explicitly set.
  var hasTransactionSize: Bool {return self._transactionSize != nil}
  /// Clears the value of `transactionSize`. Subsequent reads from it will return its default value.
  mutating func clearTransactionSize() {self._transactionSize = nil}

  /// the transaction fee amount, expressed as integer in lowest currency denomination (e.g. gas price for ETH)
  var transactionFee: String {
    get {return _transactionFee ?? String()}
    set {_transactionFee = newValue}
  }
  /// Returns true if `transactionFee` has been explicitly set.
  var hasTransactionFee: Bool {return self._transactionFee != nil}
  /// Clears the value of `transactionFee`. Subsequent reads from it will return its default value.
  mutating func clearTransactionFee() {self._transactionFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _network: String? = nil
  fileprivate var _address: String? = nil
  fileprivate var _abi: String? = nil
  fileprivate var _amount: String? = nil
  fileprivate var _memo: String? = nil
  fileprivate var _transactionSize: String? = nil
  fileprivate var _transactionFee: String? = nil
}

/// CallResponse responds to a CallRequest
/// message_type = "CALL_RESPONSE"
struct MessageCallResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// if status=ACCEPTED, should be the same scope as the request
  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  /// any status response
  var status: MessageStatus {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  /// if status=ACCEPTED, the transaction ID
  var transactionID: String {
    get {return _transactionID ?? String()}
    set {_transactionID = newValue}
  }
  /// Returns true if `transactionID` has been explicitly set.
  var hasTransactionID: Bool {return self._transactionID != nil}
  /// Clears the value of `transactionID`. Subsequent reads from it will return its default value.
  mutating func clearTransactionID() {self._transactionID = nil}

  /// if status=REJECTED, an error code.
  var error: MessageError {
    get {return _error ?? .unknownError}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _status: MessageStatus? = nil
  fileprivate var _transactionID: String? = nil
  fileprivate var _error: MessageError? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "messages"

extension MessageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ACCEPTED"),
    2: .same(proto: "REJECTED"),
  ]
}

extension MessageError: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_ERROR"),
    1: .same(proto: "USER_DENIED"),
    2: .same(proto: "SCOPE_UNKNOWN"),
    3: .same(proto: "REMOTE_ID_MISMATCH"),
    4: .same(proto: "NO_ADDRESS_FOUND"),
    5: .same(proto: "TRANSACTION_FAILED"),
  ]
}

extension MessagePushNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PushNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "action"),
    3: .same(proto: "title"),
  ]

  public var isInitialized: Bool {
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._message)
      case 2: try decoder.decodeSingularStringField(value: &self._action)
      case 3: try decoder.decodeSingularStringField(value: &self._title)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._action {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagePushNotification, rhs: MessagePushNotification) -> Bool {
    if lhs._message != rhs._message {return false}
    if lhs._action != rhs._action {return false}
    if lhs._title != rhs._title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Envelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "service"),
    3: .same(proto: "expiration"),
    4: .standard(proto: "message_type"),
    5: .standard(proto: "encrypted_message"),
    6: .standard(proto: "sender_public_key"),
    7: .standard(proto: "receiver_public_key"),
    8: .same(proto: "identifier"),
    9: .same(proto: "nonce"),
    10: .standard(proto: "push_notification"),
    11: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _version: Int32? = nil
    var _service: String? = nil
    var _expiration: String? = nil
    var _messageType: String? = nil
    var _encryptedMessage: Data? = nil
    var _senderPublicKey: Data? = nil
    var _receiverPublicKey: Data? = nil
    var _identifier: String? = nil
    var _nonce: Data? = nil
    var _pushNotification: MessagePushNotification? = nil
    var _signature: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _service = source._service
      _expiration = source._expiration
      _messageType = source._messageType
      _encryptedMessage = source._encryptedMessage
      _senderPublicKey = source._senderPublicKey
      _receiverPublicKey = source._receiverPublicKey
      _identifier = source._identifier
      _nonce = source._nonce
      _pushNotification = source._pushNotification
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._version == nil {return false}
      if _storage._messageType == nil {return false}
      if _storage._encryptedMessage == nil {return false}
      if _storage._senderPublicKey == nil {return false}
      if _storage._receiverPublicKey == nil {return false}
      if _storage._identifier == nil {return false}
      if _storage._nonce == nil {return false}
      if _storage._signature == nil {return false}
      if let v = _storage._pushNotification, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._version)
        case 2: try decoder.decodeSingularStringField(value: &_storage._service)
        case 3: try decoder.decodeSingularStringField(value: &_storage._expiration)
        case 4: try decoder.decodeSingularStringField(value: &_storage._messageType)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._encryptedMessage)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._senderPublicKey)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._receiverPublicKey)
        case 8: try decoder.decodeSingularStringField(value: &_storage._identifier)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._nonce)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._pushNotification)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._version {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._service {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._expiration {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._messageType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._encryptedMessage {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
      if let v = _storage._senderPublicKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
      }
      if let v = _storage._receiverPublicKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      }
      if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._nonce {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
      }
      if let v = _storage._pushNotification {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._signature {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageEnvelope, rhs: MessageEnvelope) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._service != rhs_storage._service {return false}
        if _storage._expiration != rhs_storage._expiration {return false}
        if _storage._messageType != rhs_storage._messageType {return false}
        if _storage._encryptedMessage != rhs_storage._encryptedMessage {return false}
        if _storage._senderPublicKey != rhs_storage._senderPublicKey {return false}
        if _storage._receiverPublicKey != rhs_storage._receiverPublicKey {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._pushNotification != rhs_storage._pushNotification {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "id"),
    3: .same(proto: "status"),
    4: .same(proto: "error"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._publicKey)
      case 2: try decoder.decodeSingularBytesField(value: &self._id)
      case 3: try decoder.decodeSingularEnumField(value: &self._status)
      case 4: try decoder.decodeSingularEnumField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageLink, rhs: MessageLink) -> Bool {
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._id != rhs._id {return false}
    if lhs._status != rhs._status {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagePing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Ping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ping"),
  ]

  public var isInitialized: Bool {
    if self._ping == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._ping)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ping {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagePing, rhs: MessagePing) -> Bool {
    if lhs._ping != rhs._ping {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagePong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pong"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pong"),
  ]

  public var isInitialized: Bool {
    if self._pong == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._pong)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pong {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagePong, rhs: MessagePong) -> Bool {
    if lhs._pong != rhs._pong {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
  ]

  public var isInitialized: Bool {
    if self._scope == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageAccountRequest, rhs: MessageAccountRequest) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "address"),
    3: .same(proto: "status"),
    4: .same(proto: "error"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      case 2: try decoder.decodeSingularStringField(value: &self._address)
      case 3: try decoder.decodeSingularEnumField(value: &self._status)
      case 4: try decoder.decodeSingularEnumField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageAccountResponse, rhs: MessageAccountResponse) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._address != rhs._address {return false}
    if lhs._status != rhs._status {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagePaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "network"),
    3: .same(proto: "address"),
    4: .same(proto: "amount"),
    5: .same(proto: "memo"),
    6: .standard(proto: "transaction_size"),
    7: .standard(proto: "transaction_fee"),
  ]

  public var isInitialized: Bool {
    if self._scope == nil {return false}
    if self._address == nil {return false}
    if self._amount == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      case 2: try decoder.decodeSingularStringField(value: &self._network)
      case 3: try decoder.decodeSingularStringField(value: &self._address)
      case 4: try decoder.decodeSingularStringField(value: &self._amount)
      case 5: try decoder.decodeSingularStringField(value: &self._memo)
      case 6: try decoder.decodeSingularStringField(value: &self._transactionSize)
      case 7: try decoder.decodeSingularStringField(value: &self._transactionFee)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._network {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._amount {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._memo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._transactionSize {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._transactionFee {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagePaymentRequest, rhs: MessagePaymentRequest) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._network != rhs._network {return false}
    if lhs._address != rhs._address {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._memo != rhs._memo {return false}
    if lhs._transactionSize != rhs._transactionSize {return false}
    if lhs._transactionFee != rhs._transactionFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagePaymentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "status"),
    3: .standard(proto: "transaction_id"),
    4: .same(proto: "error"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      case 2: try decoder.decodeSingularEnumField(value: &self._status)
      case 3: try decoder.decodeSingularStringField(value: &self._transactionID)
      case 4: try decoder.decodeSingularEnumField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._transactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagePaymentResponse, rhs: MessagePaymentResponse) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._status != rhs._status {return false}
    if lhs._transactionID != rhs._transactionID {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageCallRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "network"),
    3: .same(proto: "address"),
    4: .same(proto: "abi"),
    5: .same(proto: "amount"),
    6: .same(proto: "memo"),
    7: .standard(proto: "transaction_size"),
    8: .standard(proto: "transaction_fee"),
  ]

  public var isInitialized: Bool {
    if self._scope == nil {return false}
    if self._address == nil {return false}
    if self._abi == nil {return false}
    if self._amount == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      case 2: try decoder.decodeSingularStringField(value: &self._network)
      case 3: try decoder.decodeSingularStringField(value: &self._address)
      case 4: try decoder.decodeSingularStringField(value: &self._abi)
      case 5: try decoder.decodeSingularStringField(value: &self._amount)
      case 6: try decoder.decodeSingularStringField(value: &self._memo)
      case 7: try decoder.decodeSingularStringField(value: &self._transactionSize)
      case 8: try decoder.decodeSingularStringField(value: &self._transactionFee)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._network {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._abi {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._amount {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._memo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._transactionSize {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._transactionFee {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageCallRequest, rhs: MessageCallRequest) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._network != rhs._network {return false}
    if lhs._address != rhs._address {return false}
    if lhs._abi != rhs._abi {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._memo != rhs._memo {return false}
    if lhs._transactionSize != rhs._transactionSize {return false}
    if lhs._transactionFee != rhs._transactionFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessageCallResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "status"),
    3: .standard(proto: "transaction_id"),
    4: .same(proto: "error"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._scope)
      case 2: try decoder.decodeSingularEnumField(value: &self._status)
      case 3: try decoder.decodeSingularStringField(value: &self._transactionID)
      case 4: try decoder.decodeSingularEnumField(value: &self._error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._transactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessageCallResponse, rhs: MessageCallResponse) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._status != rhs._status {return false}
    if lhs._transactionID != rhs._transactionID {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
