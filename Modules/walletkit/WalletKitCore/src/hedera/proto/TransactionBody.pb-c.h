/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TransactionBody.proto */

#ifndef PROTOBUF_C_TransactionBody_2eproto__INCLUDED
#define PROTOBUF_C_TransactionBody_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "BasicTypes.pb-c.h"
#include "Duration.pb-c.h"
#include "CryptoTransfer.pb-c.h"

typedef struct _Proto__TransactionBody Proto__TransactionBody;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  PROTO__TRANSACTION_BODY__DATA__NOT_SET = 0,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_CALL = 7,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_CREATE_INSTANCE = 8,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_UPDATE_INSTANCE = 9,
  PROTO__TRANSACTION_BODY__DATA_CONTRACT_DELETE_INSTANCE = 22,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_ADD_CLAIM = 10,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_CREATE_ACCOUNT = 11,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_DELETE = 12,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_DELETE_CLAIM = 13,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_TRANSFER = 14,
  PROTO__TRANSACTION_BODY__DATA_CRYPTO_UPDATE_ACCOUNT = 15,
  PROTO__TRANSACTION_BODY__DATA_FILE_APPEND = 16,
  PROTO__TRANSACTION_BODY__DATA_FILE_CREATE = 17,
  PROTO__TRANSACTION_BODY__DATA_FILE_DELETE = 18,
  PROTO__TRANSACTION_BODY__DATA_FILE_UPDATE = 19,
  PROTO__TRANSACTION_BODY__DATA_SYSTEM_UNDELETE = 21,
  PROTO__TRANSACTION_BODY__DATA_FREEZE = 23
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__TRANSACTION_BODY__DATA)
} Proto__TransactionBody__DataCase;

/*
 * A single transaction. All transaction types are possible here. 
 */
struct  _Proto__TransactionBody
{
  ProtobufCMessage base;
  /*
   * The ID for this transaction, which includes the payer's account (the account paying the transaction fee). If two transactions have the same transactionID, they won't both have an effect
   */
  Proto__TransactionID *transactionid;
  /*
   * The account of the node that submits the client's transaction to the network
   */
  Proto__AccountID *nodeaccountid;
  /*
   * The maximum transaction fee the client is willing to pay, which is split between the network and the node
   */
  uint64_t transactionfee;
  /*
   *The transaction is invalid if consensusTimestamp > transactionID.transactionValidStart + transactionValidDuration
   */
  Proto__Duration *transactionvalidduration;
  /*
   * Should a record of this transaction be generated? (A receipt is always generated, but the record is optional)
   */
  protobuf_c_boolean generaterecord PROTOBUF_C__DEPRECATED;
  /*
   * Any notes or descriptions that should be put into the record (max length 100)
   */
  char *memo;
  Proto__TransactionBody__DataCase data_case;
  union {
    Proto__CryptoTransferTransactionBody *cryptotransfer;
  };
};
#define PROTO__TRANSACTION_BODY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__transaction_body__descriptor) \
    , NULL, NULL, 0, NULL, 0, (char *)protobuf_c_empty_string, PROTO__TRANSACTION_BODY__DATA__NOT_SET, {0} }


/* Proto__TransactionBody methods */
void   proto__transaction_body__init
                     (Proto__TransactionBody         *message);
size_t proto__transaction_body__get_packed_size
                     (const Proto__TransactionBody   *message);
size_t proto__transaction_body__pack
                     (const Proto__TransactionBody   *message,
                      uint8_t             *out);
size_t proto__transaction_body__pack_to_buffer
                     (const Proto__TransactionBody   *message,
                      ProtobufCBuffer     *buffer);
Proto__TransactionBody *
       proto__transaction_body__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__transaction_body__free_unpacked
                     (Proto__TransactionBody *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__TransactionBody_Closure)
                 (const Proto__TransactionBody *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor proto__transaction_body__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TransactionBody_2eproto__INCLUDED */
